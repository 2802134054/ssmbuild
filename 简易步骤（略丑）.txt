1.创建一个普通的maven项目

2.导入需要的文件jar包

3.连接数据库

4.创建整个项目的包和配置文件头
mybatis：
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

</configuration>
spring：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>
5.连接数据库包
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/ssmbulid?useSSL=true&useUnicode=true&characterEncoding=utf8
jdbc.username=root
jdbc.password=123456

6.创建实体类
package com.book.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data//g/set方法,toString
@AllArgsConstructor//有参构造
@NoArgsConstructor//无参构造
public class Books {
    private int BookID;//id
    private String bookName;//书名
    private int bookCounts;//数量
    private String detail;//描述
}

7.创建接口
package com.book.dao;

import com.book.pojo.Books;

import java.util.List;

public interface BookMapper {
    //增加一本书
    int addBook(Books books);

    //删除一本书
    int deleteBook(int id);

    //修改书名
    int updateBook(Books books);

    //查询书名
    Books queryBookById(int id);

    //查询全部内容
    List<Books> queryAllBook();
}

8.实现接口
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.book.dao.BookMapper">

    <insert id="addBook" parameterType="Books">
        insert into books (bookName,bookCounts,detail)
         values (#{bookName},#{bookCounts},#{detail});
    </insert>

    <delete id="deleteBook" parameterType="int">
        delete from books where bookID=#{bookID}
    </delete>
    
    <update id="updateBook" parameterType="Books">
        update books set bookName = #{bookName},bookCounts=#{bookCounts},detail=#{detail}
        where bookID=#{bookID};
    </update>

    <select id="queryBookById" parameterType="Books">
        select * from books where bookID=#{bookID}
    </select>
    
    <select id="queryAllBook" parameterType="Books">
        select * from books
    </select>

</mapper>
9.绑定配置文件
<mappers>
        <mapper class="com.book.dao.BookMapper"/>
    </mappers>
10.接下来写业务层
package com.book.service;

import com.book.pojo.Books;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface BookService {
    //增加一本书
    int addBook(Books books);

    //删除一本书
    int deleteBook(int id);

    //修改书名
    int updateBook(Books books);

    //查询书名
    Books queryBookById(int id);

    //查询全部内容
    List<Books> queryAllBook();
}
11.实现接口
package com.book.service;

import com.book.dao.BookMapper;
import com.book.pojo.Books;

import java.util.List;

public class BookServiceImpl implements BookService
{
    private BookMapper bookMapper;

    public void setBookMapper(BookMapper bookMapper) {
        this.bookMapper = bookMapper;
    }

    public int addBook(Books books) {
        return bookMapper.addBook(books);
    }

    public int deleteBook(int id) {
        return bookMapper.deleteBook(id);
    }

    public int updateBook(Books books) {
        return bookMapper.updateBook(books);
    }

    public Books queryBookById(int id) {
        return bookMapper.queryBookById(id);
    }

    public List<Books> queryAllBook() {
        return bookMapper.queryAllBook();
    }
}
12.Spring接管(整合)Dao层
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    <!--关联数据库配置文件-->
    <context:property-placeholder location="classpath:database.properties"/>

    <!--链接池
    dbcp:  半自动化操作,不能自动连接
    c3p0:  自动化操作(自动化的加载配置文件,并且可以自动设置到对象中!)
    druid:
    hikari:
    -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--c3p0连接池的私有属性-->
        <property name="maxPoolSize" value="30"/><!--最大-->
        <property name="minPoolSize" value="10"/><!--最小-->
        <!--关闭连接池后不自动commit    自动连接-->
        <property name="autoCommitOnClose" value="false"/>
        <!--获取连接超时时间   10秒-->
        <property name="checkoutTimeout" value="10000"/>
        <!--当获取连接失败重试次数   2次-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>


    <!--SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--绑定Mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--配置Dao接口扫描包,动态的实现了Dao接口可以注入到Spring容器中！-->
    <!--这一步相当于之前额外添加一个包Impl进行实现Dao包的内容-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入  SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--要扫描的Dao包--><!--关系到Spring-service中的ref="bookMapper"疑问-->
        <property name="basePackage" value="com.book.dao"/>
    </bean>
</beans>
13.Sping接管(整合)Service层
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--扫描service下的包-->
    <context:component-scan base-package="com.book.service"/>

    <!--将我们的所有业务类,注入到Spring,可以通过配置,或者注解实现-->
    <bean id="BookServiceImpl" class="com.book.service.BookServiceImpl">
        <property name="bookMapper" ref="bookMapper"/>
    </bean>

    <!--声明式事务配置-->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--AOP事务支持-->
</beans>
14.增加web支持
15.编写web配置
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--DispatcherServlet-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--乱码过滤-->
    <filter>
        <filter-name>encodingFiter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFiter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--Session  存活时长-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>
</web-app>
16.接管MVC层

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
         http://www.springframework.org/schema/context
         https://www.springframework.org/schema/context/spring-context.xsd">

    <!--注解驱动-->
    <mvc:annotation-driven/>

    <!--静态资源过滤-->
    <mvc:default-servlet-handler/>

    <!--扫描包  Controller-->
    <context:component-scan base-package="com.book.controller"/>

    <!--视图解析器-->
    <bean  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INT/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>
17.配置Tomcat 9
注意：由于idea的问题可能lib包没有自动添加，启动tomcat不会自动启动页面，启动也会是404。
解决方法：Project Settings---Artifacts--在WEB-INF下创建lib包---在lib里添加所有的jar包。
18.编写Controller层
package com.book.controller;

import com.book.pojo.Books;
import com.book.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.List;

@Controller
@RequestMapping("/book")
public class BookController {
    //controller(Servlet) 调service层

    @Autowired
    @Qualifier("BookServiceImpl")
    private BookService bookService;

    //查询全部的书籍,并且返回到一个书籍展示页面

    @RequestMapping("/allBook")
    public String list(Model model){
        List<Books> bookList = bookService.queryAllBook();
        model.addAttribute("list",bookList);
        return "allBook";
    }
}
注意：
因为我们之前在web.xml中配置了 <param-value>classpath:spring-mvc.xml</param-value>
这句话，但是测试tomcat中回出现bean未注入的情况，这是错误的，因为被托管所以应该更改为
  <param-value>classpath:application-Context.xml</param-value>；

1.问题： bean不存在

解决步骤：
1.查看这个bean是否注入成功    ok
2.Junit单元测试,看我们的代码是否能够查询出来结果！   ok
3.如果以上都没问题,那问题就不是出现在我们的底层，是spring出现了问题。
4.SpringMVC,整合的时候没有调用到我们的Service层的bean;
    1.application-context.xml 没有注入bean
    2.WEB.XML中,我们也绑定过配置文件。  发现问题，我们配置的是Spring-mvc.xml,这里面确实没有service bean，所以报空指针

19.引发了一个可能会出现的问题
因为jsp包是在WEB-INF下，视图解析器没有指定会找不到jsp包下的jsp页面
解决方法
@RequestMapping("/book")更改成
@RequestMapping(value = "/book",method =
{RequestMethod.GET,RequestMethod.POST})

20.美化基础界面
<style>
      a{
        text-decoration: none;
        color: black;
        font-size: 18px;
      }
      h3{
        width: 180px;
        height: 38px;
        margin: 100px auto;
        text-align: center;
        line-height: 38px;
        background: deepskyblue;
        border-radius: 5px;
      }
    </style>
21.详情写BootStrap插件前端，并显示出所有书籍的内容
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>书籍展示页面</title>
    <%--BootStrap美化界面--%>
    <link href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <div class="row_clearfix">
        <div class="col-md-12 column">
            <div class="page-header">
                <h1>
                    <small>书籍列表 ————  显示所有书籍</small>
                </h1>
            </div>
        </div>
    </div>

    <div class="row clearfix">
        <div class="col-md-12 column">
            <table class="table table-hover table-striped">
                <thead>
                <tr>
                    <th>书籍编号</th>
                    <th>书籍名称</th>
                    <th>书籍数量</th>
                    <th>书籍详情</th>
                </tr>
                </thead>

                <%--书籍从数据库中查询出来,从这个list中遍历出来：foreach--%>
                <tbody>
                <c:forEach var="book" items="${list}">
                    <tr>
                        <td>${book.bookID}</td>
                        <td>${book.bookName}</td>
                        <td>${book.bookCounts}</td>
                        <td>${book.detail}</td>
                    </tr>
                </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
</body>
</html>
注意<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>包不要导错

22.增加添加方法
    /*跳转到增加书籍页面*/
    @RequestMapping("/toAddBook")
    public String toAddPaper(){

        return "addBook";
    }

allBook.jsp页面
<div class="row">
            <div class="col-md-4 column">
                <%--toAddBook--%>
                <a href="${pageContext.request.contextPath}/book/toAddBook">添加书籍</a>
            </div>
</div>
23.创建跳转目标页面并输写样式
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
    <%--BootStrap美化界面--%>
    <link href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container"  >
    <div class="row_clearfix">
        <div class="col-md-12 column">
            <div class="page-header">
                <h1>
                    <small>新增书籍</small>
                </h1>
            </div>
        </div>
    </div>


    <form action="" method="">
        <div class="form-group">
            <label>书籍名称：</label>
            <input type="text" class="form-control">
        </div>
        <div class="form-group">
            <label>书籍数量：</label>
            <input type="text" class="form-control">
        </div>
        <div class="form-group">
            <label>书籍描述：</label>
            <input type="text" class="form-control">
        </div>
        <div class="form-group">
            <label>书籍描述：</label>
            <input type="submit" class="form-control" value="添加">
        </div>
        <%--<div class="form-group">
            <label for="exampleInputPassword1">Email address</label>
            <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
        </div>
        <div class="form-group">
            <label for="exampleInputFile">Email address</label>
            <input type="file" class="form-control" id="exampleInputFile">
            <p class="help-block">Example block-level help text here.</p>
        </div>
        <div class="checkbox">
            <label>
                <input type="checkbox">Check me out
            </label>
        </div>
        <button type="submit" class="btn btn-default">Submit</button>--%>

    </form>
</div>
</body>
</html>
24.实现添加书籍的请求
//添加书籍的请求
    public String addBook(Books books){
        System.out.println("addBook=>" + books);
        bookService.addBook(books);
        return "redirect:/book/allBook";
//重定向到我们@RequestMapping("/allBook")请求，进行复用减少代码运行
    }
25.jsp更改内容
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
    <%--BootStrap美化界面--%>
    <link href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container"  >
    <div class="row_clearfix">
        <div class="col-md-12 column">
            <div class="page-header">
                <h1>
                    <small>新增书籍</small>
                </h1>
            </div>
        </div>
    </div>


    <form action="${pageContext.request.contextPath}/book/addBook" method="post">
        <div class="form-group">
            <label>书籍名称：</label>
            <input type="text" name="bookName" class="form-control" required>
        </div>
        <div class="form-group">
            <label>书籍数量：</label>
            <input type="text" name="bookCounts" class="form-control" required>
        </div>
        <div class="form-group">
            <label>书籍描述：</label>
            <input type="text" name="detail" class="form-control" required>
        </div>
        <div class="form-group">
            <input type="submit" class="form-control" value="添加">
        </div>
        <%--<div class="form-group">
            <label for="exampleInputPassword1">Email address</label>
            <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
        </div>
        <div class="form-group">
            <label for="exampleInputFile">Email address</label>
            <input type="file" class="form-control" id="exampleInputFile">
            <p class="help-block">Example block-level help text here.</p>
        </div>
        <div class="checkbox">
            <label>
                <input type="checkbox">Check me out
            </label>
        </div>
        <button type="submit" class="btn btn-default">Submit</button>--%>

    </form>
</div>
</body>
</html>
采用了没有完全输出内容则不能进行添加
26.主页面添加修改链接
<td>
                            <a href="${pageContext.request.contextPath}/book/toUpdate?id=${book.bookID}">修改</a>
                            &nbsp; | &nbsp;
                            <a href="#">删除</a>
</td>
27.创建跳转页面方法
 /*跳转到修改书籍页面*/
    @RequestMapping("/toUpdate")
    public String toUpdatePaper(int id,Model model){
        Books books = bookService.queryBookById(id);
        model.addAttribute("QBook",books);
        return "updateBook";
    }
28.跳转页面.jsp
<%--
  Created by IntelliJ IDEA.
  User: MR.tao
  Date: 2020/10/18
  Time: 23:50
  To change this template use File | Settings | File Templates.
--%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>修改书籍页面</title>
    <%--BootStrap美化界面--%>
    <link href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container"  >
    <div class="row_clearfix">
        <div class="col-md-12 column">
            <div class="page-header">
                <h1>
                    <small>新增书籍</small>
                </h1>
            </div>
        </div>
    </div>


    <form action="${pageContext.request.contextPath}/book/updateBook" method="post">
        <div class="form-group">
            <label>书籍名称：</label>
            <input type="text" name="bookName" class="form-control" value="${QBook.bookName}" required>
        </div>
        <div class="form-group">
            <label>书籍数量：</label>
            <input type="text" name="bookCounts" class="form-control" value="${QBook.bookCounts}" required>
        </div>
        <div class="form-group">
            <label>书籍描述：</label>
            <input type="text" name="detail" class="form-control"value="${QBook.detail}" required>
        </div>
        <div class="form-group">
            <input type="submit" class="form-control" value="修改">
        </div>
    </form>
</div>
</body>
</html>
29.执行修改方法
 //添加书籍的请求
    @RequestMapping("/updateBook")
    public String updateBook(Books books){
        System.out.println("updateBook=>" + books);
        bookService.updateBook(books);
        return "redirect:/book/allBook";//重定向到我们@RequestMapping("/allBook")请求，进行复用减少代码运行
    }
但是这样执行的修改是不会成功的。我们需要开启AOP事务。
30.开启AOP事务
<!--声明式事务配置-->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--AOP事务支持-->
    <tx:advice id="txAdvice" transaction-manager="TransactionManager">
        <tx:attributes>
            <!--<tx:method name="add" propagation="REQUIRED"/>
              <tx:method name="delete" propagation="REQUIRED"/>
              <tx:method name="update" propagation="REQUIRED"/>
              <tx:method name="query" read-only="true"/>-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.book.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
31.隐藏ID问题
配置事务后依旧错误，经过排查发现是之前填下的坑，修改需要根据ID，之前并没有输出ID所以获取不到ID，所以修改失败。解决方法：
1.首先进行输出sql语句，查看是否有问题：   发现问题  ID为0
updateBook=>Books(BookID=0, bookName=多多, bookCounts=1, detail=可爱)
2.前端传入一个隐藏域
<input type="hidden" name="bookID" value="${QBook.bookID}">

添加隐藏域之后得出sql语句为
updateBook=>Books(BookID=4, bookName=多多, bookCounts=1, detail=可爱)

32.执行删除功能(使用RestFul风格进行传入ID)
<a href="${pageContext.request.contextPath}/book/deleteBook/${book.bookID}">删除</a>

33.实现删除方法(使用RestFul风格进行传入ID)
 //删除书籍的请求
    @RequestMapping("/deleteBook/{bookId}")
    public String deleteBook(@PathVariable("bookId") int id){
        bookService.deleteBook(id);
        return "redirect:/book/allBook";//重定向到我们@RequestMapping("/allBook")请求，进行复用减少代码运行
    }
34.添加查询样式
 <div class="col-md-4 column"></div>
            <div class="col-md-4 column">
                <%--查询书籍 --%>
                <form action="${pageContext.request.contextPath}/book/queryBook" method="post" style="float: right">
                    <input type="text" name="queryBookName" class="form-inline" placeholder="请输入要查询的书籍名称">
                    <input type="submit" value="查询" class="btn btn-primary">
                </form>
            </div>
35.实现模糊查询方法
 <div class="col-md-4 column"></div>
            <div class="col-md-4 column">
                <%--查询书籍 --%>
                <form action="${pageContext.request.contextPath}/book/queryBook" method="post" style="float: right">
                    <input type="text" name="queryBookName" class="form-inline" placeholder="请输入要查询的书籍名称">
                    <input type="submit" value="查询" class="btn btn-primary">
                </form>
            </div>
36.编写模糊查询接口
//模糊查询
 List<Books> queryBookByName(@Param("bookName")String bookName);
37.实现模糊查询接口语句
 <select id="queryBookByName" resultType="Books">
        select * from books where bookName like concat(concat('%',#{bookName}),'%')
    </select>
38.service调用
List<Books> queryBookByName(@Param("bookName")String bookName);
39.实现
@Override
    public List<Books> queryBookByName(String bookName) {
        return bookMapper.queryBookByName(bookName);
    }
40.结束
总结问题：
